"""
Unit tests for historical_weather.py

This file was generated by Claude Sonnet 3.5 from a prompt describing test cases and the historical_weather.py file.
"""
import unittest
from unittest.mock import patch
import pandas as pd
import io
import historical_weather


class TestHistoricalWeather(unittest.TestCase):
    """Test cases for historical_weather.py"""

    def setUp(self):
        """Set up test data"""
        # Sample data for testing
        self.test_data = pd.DataFrame({
            'STATION': ['USW00014739', 'USW00014739', 'USW00014739', 'USW00025309', 'USW00012839'],
            'DATE': ['2019-01-01', '2019-01-02', '2019-02-01', '2019-01-01', '2019-01-01'],
            'PRCP': [0.1, 0.0, 0.5, 0.2, 0.0],
            'SNOW': [1.0, 0.0, 0.0, 2.0, 0.0],
            'TMAX': [35.0, 40.0, 38.0, 30.0, 80.0],
            'TMIN': [25.0, 20.0, 30.0, 20.0, 70.0]
        })
        # Add date-derived columns
        self.test_data['DATE'] = pd.to_datetime(self.test_data['DATE'])
        self.test_data['MONTH'] = self.test_data['DATE'].dt.month
        self.test_data['YEAR'] = self.test_data['DATE'].dt.year

    @patch('sys.exit')
    def test_validate_args_invalid_month(self, mock_exit):
        """Test validation fails with invalid month"""
        args = type('Args', (), {
            'month': 13,
            'year': 2015,
            'city': 'bos',
            'verbose': False
        })

        with patch('sys.stdout', new=io.StringIO()) as fake_out:
            historical_weather.validate_args(args)
            self.assertIn("Month must be between 1 and 12", fake_out.getvalue())
            mock_exit.assert_called_with(1)

    @patch('sys.exit')
    def test_validate_args_month_without_year(self, mock_exit):
        """Test validation fails with month but no year"""
        args = type('Args', (), {
            'month': 5,
            'year': None,
            'city': 'bos',
            'verbose': False
        })

        with patch('sys.stdout', new=io.StringIO()) as fake_out:
            historical_weather.validate_args(args)
            self.assertIn("Specifying a month requires a year", fake_out.getvalue())
            mock_exit.assert_called_with(1)

    @patch('sys.exit')
    def test_validate_args_invalid_year(self, mock_exit):
        """Test validation fails with invalid year"""
        args = type('Args', (), {
            'month': None,
            'year': 2005,
            'city': 'bos',
            'verbose': False
        })

        with patch('sys.stdout', new=io.StringIO()) as fake_out:
            historical_weather.validate_args(args)
            self.assertIn("Year must be between 2010 and 2019", fake_out.getvalue())
            mock_exit.assert_called_with(1)

    @patch('sys.exit')
    def test_validate_args_invalid_city(self, mock_exit):
        """Test validation fails with invalid city"""
        args = type('Args', (), {
            'month': None,
            'year': None,
            'city': 'nyc',
            'verbose': False
        })

        with patch('sys.stdout', new=io.StringIO()) as fake_out:
            historical_weather.validate_args(args)
            self.assertIn("City must be either bos, jnu, or mia", fake_out.getvalue())
            mock_exit.assert_called_with(1)

    @patch('sys.exit')
    def test_validate_args_missing_city(self, mock_exit):
        """Test validation fails with missing city"""
        args = type('Args', (), {
            'month': None,
            'year': None,
            'city': None,
            'verbose': False
        })

        with patch('sys.stdout', new=io.StringIO()) as fake_out:
            historical_weather.validate_args(args)
            self.assertIn("City must be specified", fake_out.getvalue())
            mock_exit.assert_called_with(1)

    def test_days_of_precip(self):
        """Test days_of_precip function"""
        args = type('Args', (), {'verbose': False})

        # Filter for Boston data
        boston_data = self.test_data[self.test_data['STATION'] == 'USW00014739'].copy()

        with patch('sys.stdout', new=io.StringIO()) as fake_out:
            result = historical_weather.days_of_precip(boston_data, args)
            self.assertAlmostEqual(result, 2.0)  # 2 days with precipitation in 2019
            self.assertIn("days_of_precip: 2.0", fake_out.getvalue())

    def test_days_of_precip_with_null_values(self):
        """Test days_of_precip handles null values correctly"""
        args = type('Args', (), {'verbose': False})

        # Create data with null values
        data_with_nulls = self.test_data.copy()
        data_with_nulls.loc[0, 'PRCP'] = None
        data_with_nulls.loc[1, 'SNOW'] = None

        # Filter for Boston data
        boston_data = data_with_nulls[data_with_nulls['STATION'] == 'USW00014739'].copy()

        with patch('sys.stdout', new=io.StringIO()):
            result = historical_weather.days_of_precip(boston_data, args)
            self.assertAlmostEqual(result, 2.0)  # Still 2 days with precipitation

    def test_max_temp_delta(self):
        """Test max_temp_delta function"""
        args = type('Args', (), {'verbose': False, 'year': None, 'month': None})

        # Filter for Boston data
        boston_data = self.test_data[self.test_data['STATION'] == 'USW00014739'].copy()

        with patch('sys.stdout', new=io.StringIO()) as fake_out:
            result = historical_weather.max_temp_delta(boston_data, args)
            self.assertAlmostEqual(result, 20.0)  # Max delta is 40-20=20 on Jan 2
            self.assertIn("max_temp_delta: 20.0", fake_out.getvalue())

    def test_max_temp_delta_with_year_filter(self):
        """Test max_temp_delta with year filter"""
        args = type('Args', (), {'verbose': False, 'year': 2019, 'month': None})

        # Filter for Miami data
        miami_data = self.test_data[self.test_data['STATION'] == 'USW00012839'].copy()

        with patch('sys.stdout', new=io.StringIO()) as fake_out:
            result = historical_weather.max_temp_delta(miami_data, args)
            self.assertAlmostEqual(result, 10.0)  # Miami delta is 80-70=10
            self.assertIn("max_temp_delta: 10.0", fake_out.getvalue())

    def test_max_temp_delta_with_month_filter(self):
        """Test max_temp_delta with month filter"""
        args = type('Args', (), {'verbose': False, 'year': 2019, 'month': 2})

        # Filter for Boston data
        boston_data = self.test_data[self.test_data['STATION'] == 'USW00014739'].copy()

        with patch('sys.stdout', new=io.StringIO()) as fake_out:
            result = historical_weather.max_temp_delta(boston_data, args)
            self.assertAlmostEqual(result, 8.0)  # Feb delta is 38-30=8
            self.assertIn("max_temp_delta: 8.0", fake_out.getvalue())

    def test_verbose_output(self):
        """Test verbose output is printed when enabled"""
        args = type('Args', (), {'verbose': True})

        with patch('sys.stdout', new=io.StringIO()) as fake_out:
            historical_weather.verbose_out(args, "Test verbose message")
            self.assertIn("Test verbose message", fake_out.getvalue())

        args = type('Args', (), {'verbose': False})

        with patch('sys.stdout', new=io.StringIO()) as fake_out:
            historical_weather.verbose_out(args, "Test verbose message")
            self.assertEqual("", fake_out.getvalue())


if __name__ == '__main__':
    unittest.main()
